#!groovy
// Check properties
properties([disableConcurrentBuilds()])

pipeline {
	agent {
		label 'master'
	}
	parameters {
		string(name: 'number',defaultValue: 'null',description: 'Salon number')

		choice(name: 'update',choices:['new','update'],description: 'Select update DB or new across DB')

		booleanParam(name: 'domain',defaultValue: true ,description: 'Take the domain name from salon number')

		booleanParam(name: 'inip',defaultValue: true ,description: 'Take the ip address router from salon number')

		booleanParam(name: 'atsip',defaultValue: true ,description: 'Take the ip address ATS from salon number')

		booleanParam(name: 'dc',defaultValue: true ,description: 'Take the ip address DC from salon number')

		booleanParam(name: 'virt',defaultValue: true ,description: 'Take the ip address Proxmox/VMware from salon number')

		string(name: 'city',defaultValue: 'null',description: 'Enter the name of the city')

		string(name: 'street',defaultValue: 'null',description: 'Enter address')

		choice(name: 'port',choices:['222','22'],description: 'Select the port')

		choice(name: 'type',choices:['edge','Devil'],description: 'Select the port')

		choice(name: 'timezone',choices:['Europe/Moscow','Asia/Yekaterinburg','Asia/Omsk'],description: 'Select timezone')

		choice(name: 'virtual',choices:['proxmox','vmware'],description: 'Select virtual server')
	}
        options {
                buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
                timestamps()
                skipStagesAfterUnstable()
                disableConcurrentBuilds()
        }
	stages {
		stage("Добавление информации в базу") {
			when {
				expression { params.update == 'new' }
			}
			steps {
				script {
/**					if ( params.domain == true ) {
						def GET_DOMAIN = sh (
							script: 'echo s' + params.number + '.rbt1.ru',
							label: 'Get domain name',
							returnStdout: true
						).trim()
						return GET_DOMAIN
					}	else	{
						def GET_DOMAIN = sh (
							script: 'echo null',
							label: 'Get domain name',
							returnStdout: true
						).trim()
						return GET_DOMAIN
					}
					if ( params.inip == true ) {
						def GET_INIP = sh (
							script: 'echo 10.20.' + params.number + '.1',
							label: 'Get router ip',
							returnStdout: true
						).trim()
					return GET_INIP
					}	else	{
						def GET_INIP = sh (
							script: 'echo null',
							label: 'Get router ip',
							returnStdout: true
						).trim()		
					return GET_INIP			
					} 
					def GET_DOMAIN_VAR = sh (
						script: '' + params.domain + '',
						label: 'Get domain name',
						returnStdout: true
					).trim() */
					GET_DOMAIN = sh (
						script: 'if [ "' + params.domain + '" = "true" ]; then echo s' + params.number + '.rbt1.ru ; else echo null ; fi ',
						label: "Get domain name",
						returnStdout: true
					).trim()
					def GET_ATS = sh (
						script: 'echo 10.20.' + params.number + '.20',
						label: 'Get ats ip',
						returnStdout: true
					).trim()
					GET_DC = sh (
						script: 'echo 10.20.' + params.number + '.4',
						label: 'Get dc ip',
						returnStdout: true
					).trim()
					GET_VIRT = sh (
						script: 'echo 10.20.' + params.number + '.6',
						label: 'Get type of virtual system',
						returnStdout: true
					).trim()
					sh (script: "echo $GET_DOMAIN")
//					sh (script: "mysql -h 192.168.102.2 -u kalinkin -p159753 RBT -Bse \"INSERT INTO rbt(Name,Domain,In_IP,ATC_IP,City,Adress,Domain_Controller,VMWare,Port,Type,timezone,virtual) VALUES('$number','$GET_DOMAIN','$GET_INIP','$GET_ATS','$city','$street','$GET_DC','$GET_VIRT','$port','$type','$timezone','$virtual')\" -D RBT")
//					sh (script: "mysql -h 192.168.102.2 -u kalinkin -p159753 RBT -Bse "UPDATE rbt SET Backup_server= '10.20.150.8' WHERE Name = 150" -D RBT")
				}
			}
		}
//		stage("Update DB") {
//			when {
//				expression { params.update == 'update' }
//			}
//			steps {
//				script {
//					GET_NameDC = sh (
//						script: '''
//						nmap
//						''',
//						label: '',
//						returnStdout: true
//					)
//				}
//			}
//		}
	}
}
